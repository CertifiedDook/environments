- name: 'Add the flathub flatpak repository remote to the user installation'
  community.general.flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: user

- name: 'Install apps from flathub'
  community.general.flatpak:
    name:
      - com.discordapp.Discord
      - org.telegram.desktop
      - info.smplayer.SMPlayer
      - org.gimp.GIMP
      - org.libreoffice.LibreOffice
      - com.calibre_ebook.calibre
      - org.gnome.meld
      - org.kde.kdiff3
      - org.audacityteam.Audacity
      - org.pulseaudio.pavucontrol
      - org.darktable.Darktable
      - com.visualstudio.code
    state: present
    method: user

- name: 'Install rpmfusion repositories'
  become: true
  community.general.rpm_ostree_pkg:
    pkg:
      - https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ hostvars[inventory_hostname].ansible_distribution_major_version }}.noarch.rpm
      - https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ hostvars[inventory_hostname].ansible_distribution_major_version }}.noarch.rpm

- name: 'Install software'
  become: true
  community.general.rpm_ostree_pkg:
    pkg:
      - python3-virtualenvwrapper
      - fira-code-fonts
      - restic
      - watchdog
      - pam_ssh_agent_auth
      - yubikey-manager
      - yubikey-personalization-gui
      - git
      - yakuake
      - vim
      - vim-X11
      - xclip
      - python3-ipython
      - python3-devel
      - cmake
      - gcc
      - gcc-c++
      - python3-trollius
      - zsh
      - util-linux-user
      - neovim
      - python3-neovim
      - rcm
      - ncmpc
      - mplayer
      - exfat-utils
      - fuse-exfat
      - htop
      - zbar
      - libcxx
      - libcxx.i686
      - ripgrep
      - ffmpeg
      - nmap

- name: 'Enable podman socket'
  become: true
  ansible.builtin.systemd:
    name: podman.socket
    state: started
    enabled: true

- name: 'Create plugdev group'
  become: true
  group:
    name: plugdev
    state: present

- name: 'Configure my account'
  become: true
  user:
    name: czocher
    comment: Paweł Jan Czochański
    shell: /bin/zsh
    groups: plugdev
    append: true
    state: present

- name: 'Refresh font cache'
  shell: fc-cache -f
  changed_when: False

- name: 'Install rust'
  shell: curl https://sh.rustup.rs -sSf | bash -s -- -y
  args:
    creates: ~/.rustup

- name: 'Configure rust'
  shell: rustup install stable
  args:
    chdir: ~/.cargo/bin
    creates: ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu

- name: 'Check if dotfiles exist'
  stat:
    path: ~/.dotfiles
  register: dotfiles_directory

- name: 'Clone dotfiles'
  git:
    repo: https://github.com/czocher/dotfiles.git
    dest: ~/.dotfiles
  when: dotfiles_directory.stat.exists == false
  register: dotfiles

- name: 'Install dotfiles'
  shell: rcup -vf
  args:
    creates: ~/.gnupg
  when: dotfiles is success

- name: 'Ensure proper ssh/config permissions'
  file:
    path: ~/.ssh/config
    mode: '700'
  when: dotfiles is success

- name: 'Ensure proper gnupg permissions'
  file:
    path: ~/.gnupg/
    mode: '700'
  when: dotfiles is success

- name: 'Config email address for git'
  git_config:
    name: user.email
    scope: global
    value: '{{ email }}'
  when: dotfiles is success

- name: 'Get plug for nvim'
  shell: curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  args:
    creates: ~/.config/nvim/autoload/plug.vim

- name: 'Install nvim plugins'
  shell: nvim +PlugInstall +UpdateRemotePlugins +qa
  args:
    creates: ~/.config/nvim/plugged

- name: 'Clone git-aware-prompt'
  git:
    repo: https://github.com/jimeh/git-aware-prompt.git
    dest: ~/.bash/git-aware-prompt
    version: b032b4156241182a69c2bce36bddb97469194336

- name: 'Clone oh-my-zsh'
  git:
    repo: https://github.com/robbyrussell/oh-my-zsh
    dest: ~/.oh-my-zsh

- name: 'Download public key'
  get_url:
    url: https://keybase.io/czocher/pgp_keys.asc
    dest: ~/.publickey.asc

- name: 'Add public key to gpg'
  shell: gpg --import ~/.publickey.asc && echo "C00F912646F8908A3E9444D982843164B26A29FB:6:" | gpg --import-ownertrust -
  args:
    creates: ~/.gnupg/pubring.kbx

- name: 'Add public key to gpg2'
  shell: gpg2 --import ~/.publickey.asc && echo "C00F912646F8908A3E9444D982843164B26A29FB:6:" | gpg2 --import-ownertrust -
  args:
    creates: ~/.gnupg/pubring.kbx
  register: gpg

- name: 'Add ssh publickey to authorized_keys'
  authorized_key:
    user: czocher
    key: https://github.com/czocher.keys
    state: present

- name: 'Add ssh publickey to root authorized_keys'
  become: true
  authorized_key:
    user: root
    key: https://github.com/czocher.keys
    state: present

- name: 'Allow for sudo ssh key authentication'
  become: true
  pamd:
    name: sudo
    type: auth
    control: include
    module_path: system-auth
    new_type: auth
    new_control: sufficient
    new_module_path: pam_ssh_agent_auth.so
    module_arguments: file=/root/.ssh/authorized_keys
    state: before

- name: 'Allow for su ssh key authentication'
  become: true
  pamd:
    name: su
    type: auth
    control: include
    module_path: system-auth
    new_type: auth
    new_control: sufficient
    new_module_path: pam_ssh_agent_auth.so
    module_arguments: file=/root/.ssh/authorized_keys
    state: before

- name: 'Add ssh agent forward for sudo'
  become: true
  lineinfile:
    path: /etc/sudoers
    line: 'Defaults    env_keep += "SSH_AUTH_SOCK"'
    state: present
    insertafter: '^Defaults    env_keep ='
    validate: '/usr/sbin/visudo -cf %s'

- name: 'Configure TCP BBR'
  become: true
  sysctl:
    name: '{{ item.name }}'
    value: '{{ item.value }}'
    sysctl_set: true
    state: present
    reload: true
  with_items:
    - { name: 'net.core.default_qdisc', value: 'fq' }
    - { name: 'net.ipv4.tcp_congestion_control', value: 'bbr' }

- name: 'Enable kdeconnect on firewall'
  become: true
  firewalld:
    service: kdeconnect
    state: enabled
    permanent: true

- name: 'Enable fstrim'
  become: true
  systemd:
    name: fstrim.timer
    enabled: true

- name: 'Enable watchdog'
  become: true
  systemd:
    name: watchdog
    enabled: true

- name: 'Find the firefox profile directory'
  shell: cat ~/.mozilla/firefox/profiles.ini | grep Path | cut -d = -f 2
  changed_when: False
  register: profile

- name: 'Copy firefox user preferences'
  template:
    src: 'user.js'
    dest: ~/.mozilla/firefox/{{ profile.stdout }}/

- name: 'Config udev rules for android development'
  become: true
  template:
    src: '99-android-debug.rules'
    dest: /etc/udev/rules.d/
  register: udev

- name: 'Reload udev'
  become: true
  command: udevadm control --reload
  when: udev.changed

- name: 'Restart udev service'
  become: true
  service: name=systemd-udevd state=restarted
  when: udev.changed

- name: 'Add restart_pcscd service'
  template:
    src: templates/restart_pcscd.service
    dest: /lib/systemd/system/restart_pcscd.service

- name: 'Enable restart_pcscd service'
  become: true
  name: restart_pcscd.service
  state: started
  enabled: true

- name: 'Add clean_downloads systemd user service'
  template:
    src: templates/clean_downloads.service
    dest: ~/.config/systemd/user/clean_downloads.service

- name: 'Add clean_downloads systemd user timer'
  template:
    src: templates/clean_downloads.timer
    dest: ~/.config/systemd/user/clean_downloads.timer

- name: 'Enable the clean_downloads systemd timer'
  systemd:
    scope: user
    name: clean_downloads.timer
    state: started
    enabled: true

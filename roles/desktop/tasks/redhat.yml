- name: 'Add the flathub flatpak repository remote'
  community.general.flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: user

- name: 'Add kde flatpak repository remote'
  community.general.flatpak_remote:
    name: kdeapps
    state: present
    flatpakrepo_url: https://distribute.kde.org/kdeapps.flatpakrepo
    method: user

- name: 'Install flatpaks'
  community.general.flatpak:
    name: '{{ item }}'
    state: present
    method: user
    remote: flathub
  with_items:
    - org.libreoffice.LibreOffice
    - org.audacityteam.Audacity
    - org.gimp.GIMP
    - org.gimp.GIMP.Plugin.Resynthesizer/x86_64/2-40
    - com.calibre_ebook.calibre
    - com.valvesoftware.Steam
    - org.kde.kate
    - io.neovim.nvim
    - org.pulseaudio.pavucontrol
    - org.darktable.Darktable
    - org.gnome.Meld
    - org.kde.okteta

- name: 'Install flatpaks from kdeapps'
  community.general.flatpak:
    name: '{{ item }}'
    state: present
    method: user
    remote: kdeapps
  with_items:
    - org.kde.kdiff3


# Enable copr for gopass
# Install rpmfusion
# Install gopass-jsonapi
# Change hostname to a user-provided one

- name: 'Create plugdev group'
  group:
    name: plugdev
    state: present
  become: true

- name: 'Configure my account'
  become: true
  user:
    name: czocher
    comment: Paweł Jan Czochański
    shell: /bin/zsh
    groups: plugdev
    append: true
    state: present

- name: 'Create the font folder'
  file:
    path: ~/.local/share/fonts
    state: directory

# Add check if already downloaded
- name: 'Download FiraCode font'
  get_url:
    url: https://github.com/tonsky/FiraCode/blob/master/distr/ttf/FiraCode-{{ item }}.ttf?raw=true
    dest: ~/.local/share/fonts/FiraCode-{{ item }}.ttf
  with_items:
    - Bold
    - Light
    - Medium
    - Regular

- name: 'Refresh font cache'
  shell: fc-cache -f
  changed_when: False

- name: 'Check if dotfiles exist'
  stat:
    path: ~/.dotfiles
  register: dotfiles_directory

- name: 'Clone dotfiles'
  git:
    repo: https://github.com/czocher/dotfiles.git
    dest: ~/.dotfiles
  when: dotfiles_directory.stat.exists == false
  register: dotfiles

- name: 'Install dotfiles'
  shell: rcup -vf
  args:
    creates: ~/.gnupg
  when: dotfiles is success

- name: 'Ensure proper ssh/config permissions'
  file:
    path: ~/.ssh/config
    mode: '700'
  when: dotfiles is success

- name: 'Ensure proper gnupg permissions'
  file:
    path: ~/.gnupg/
    mode: '700'
  when: dotfiles is success

- name: 'Config email address for git'
  git_config:
    name: user.email
    scope: global
    value: '{{ email }}'
  when: dotfiles is success

- name: 'Get plug for nvim'
  shell: curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  args:
    creates: ~/.config/nvim/autoload/plug.vim

- name: 'Install nvim plugins'
  shell: nvim +PlugInstall +UpdateRemotePlugins +qa
  args:
    creates: ~/.config/nvim/plugged

- name: 'Clone git-aware-prompt'
  git:
    repo: https://github.com/jimeh/git-aware-prompt.git
    dest: ~/.bash/git-aware-prompt
    version: b032b4156241182a69c2bce36bddb97469194336

- name: 'Clone oh-my-zsh'
  git:
    repo: https://github.com/robbyrussell/oh-my-zsh
    dest: ~/.oh-my-zsh

- name: 'Download public key'
  get_url:
    url: https://keybase.io/czocher/pgp_keys.asc
    dest: ~/.publickey.asc

- name: 'Add public key to gpg'
  shell: gpg --import ~/.publickey.asc && echo "C00F912646F8908A3E9444D982843164B26A29FB:6:" | gpg --import-ownertrust -
  args:
    creates: ~/.gnupg/pubring.kbx

- name: 'Add public key to gpg2'
  shell: gpg2 --import ~/.publickey.asc && echo "C00F912646F8908A3E9444D982843164B26A29FB:6:" | gpg2 --import-ownertrust -
  args:
    creates: ~/.gnupg/pubring.kbx
  register: gpg

- name: 'Add ssh publickey to authorized_keys'
  authorized_key:
    user: czocher
    key: https://github.com/czocher.keys
    state: present

- name: 'Add ssh publickey to authorized_keys'
  become: true
  authorized_key:
    user: root
    key: https://github.com/czocher.keys
    state: present

- name: 'Add ssh agent forward for sudo'
  become: true
  lineinfile:
    path: /etc/sudoers
    line: 'Defaults    env_keep += "SSH_AUTH_SOCK"'
    state: present
    insertafter: '^Defaults    env_keep ='
    validate: '/usr/sbin/visudo -cf %s'

- name: 'Configure TCP BBR'
  become: true
  sysctl:
    name: '{{ item.name }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - { name: 'net.core.default_qdisc', value: 'fq' }
    - { name: 'net.ipv4.tcp_congestion_control', value: 'bbr' }

- name: 'Enable kdeconnect on firewall'
  become: true
  firewalld:
    service: kdeconnect
    state: enabled
    permanent: yes

- name: 'Enable watchdog'
  become: true
  systemd:
    name: watchdog
    enabled: yes

- name: 'Find the firefox profile directory'
  shell: cat ~/.mozilla/firefox/profiles.ini | grep Path | cut -d = -f 2
  changed_when: False
  register: profile

- name: 'Copy firefox user preferences'
  template:
    src: 'user.js'
    dest: ~/.mozilla/firefox/{{ profile.stdout }}/

- name: 'Config udev rules for android development'
  become: true
  template:
    src: '99-android-debug.rules'
    dest: /etc/udev/rules.d/
  register: udev

- name: 'Reload udev'
  become: true
  command: udevadm control --reload
  when: udev.changed

- name: 'Restart udev service'
  become: true
  service: name=systemd-udevd state=restarted
  when: udev.changed

- name: 'Allow for sudo ssh key authentication'
  become: true
  pamd:
    name: sudo
    type: auth
    control: include
    module_path: system-auth
    new_type: auth
    new_control: sufficient
    new_module_path: pam_ssh_agent_auth.so
    module_arguments: file=/root/.ssh/authorized_keys
    state: before

# Create ~/Programy if doesn't exist

- name: 'Check if jetbrains exists'
  stat:
    path: ~/Programy/jetbrains-toolbox/jetbrains-toolbox
  register: jetbrains_binary

- name: 'Install jetbrains-toolbox'
  block:
    - name: 'Get the latest jetbrains package url'
      uri:
        url: 'https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release'
        return_content: yes
      register: jetbrains
    - name: 'Download the latest jetbrains package'
      get_url:
        url: '{{ jetbrains.json.TBA.0.downloads.linux.link }}'
        dest: ~/Programy/jetbrains-toolbox.tar.gz
    - name: 'Create the required jetbrains directory'
      file:
        path: ~/Programy/jetbrains-toolbox
        state: directory
    - name: 'Unpack jetbrains-toolbox'
      unarchive:
        src: ~/Programy/jetbrains-toolbox.tar.gz
        dest: ~/Programy/jetbrains-toolbox
        extra_opts: [--strip-components=1]
    - name: 'Remove the jetbrains archive'
      file:
        path: ~/Programy/jetbrains-toolbox.tar.gz
        state: absent
  when: jetbrains_binary.stat.exists == false

- name: 'Check if telegram exists'
  stat:
    path: ~/Programy/Telegram
  register: telegram

- name: 'Setup Telegram Desktop'
  block:
    - name: 'Download telegram'
      get_url:
        url: https://telegram.org/dl/desktop/linux
        dest: ~/Programy/telegram.tar.xz
    - name: 'Unpack telegram'
      unarchive:
        src: ~/Programy/telegram.tar.xz
        dest: ~/Programy/
    - name: 'Cleanup telegram'
      file:
        path: ~/Programy/telegram.tar.gz
        state: absent
  when: telegram.stat.exists == false

- name: 'Check if discord exists'
  stat:
    path: ~/Programy/Discord
  register: discord

- name: 'Setup Discord'
  block:
    - name: 'Download discord'
      get_url:
        url: https://discordapp.com/api/download?platform=linux&format=tar.gz
        dest: ~/Programy/discord.tar.gz
    - name: 'Unpack discord'
      unarchive:
        src: ~/Programy/discord.tar.gz
        dest: ~/Programy/
    - name: 'Cleanup discord'
      file:
        path: ~/Programy/discord.tar.gz
        state: absent
  when: discord.stat.exists == false

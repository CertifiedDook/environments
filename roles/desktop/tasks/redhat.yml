- name: 'Install copr dnf plugin'
  become: true
  dnf:
    state: latest
    pkg:
      - dnf-plugins-core

- name: 'Install RPMFusion repository'
  become: true
  dnf:
    state: latest
    pkg:
      - https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ hostvars[inventory_hostname].ansible_distribution_major_version }}.noarch.rpm
      - https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ hostvars[inventory_hostname].ansible_distribution_major_version }}.noarch.rpm

- name: 'Enable Fedora copr for gopass'
  become: true
  command:
    cmd: dnf copr enable -y daftaupe/gopass
    creates: /etc/yum.repos.d/_copr:copr.fedorainfracloud.org:daftaupe:gopass.repo
    warn: false

- name: 'Enable Fedora copr for fedy'
  become: true
  command:
    cmd: dnf copr enable -y kwizart/fedy
    creates: /etc/yum.repos.d/_copr:copr.fedorainfracloud.org:kwizart:fedy.repo
    warn: false

- name: 'Install software'
  become: true
  dnf:
    state: latest
    pkg:
      - restic
      - watchdog
      - gopass
      - go
      - pam_ssh_agent_auth
      - pam-u2f
      - pamu2fcfg
      - ncurses-compat-libs
      - yubikey-personalization-gui
      - gimp
      - libreoffice
      - libreoffice-langpack-pl
      - calibre
      - git
      - yakuake
      - vim
      - vim-X11
      - meld
      - xclip
      - python3-ipython
      - python3-virtualenvwrapper
      - python-ipython
      - python-devel
      - python3-devel
      - cmake
      - gcc
      - gcc-c++
      - python3-trollius
      - kdiff3
      - zsh
      - util-linux-user
      - pinentry-qt
      - java-1.8.0*
      - neovim
      - python3-neovim
      - https://prerelease.keybase.io/keybase_amd64.rpm
      - rcm
      - ncmpc
      - jq
      - audacity
      - mplayer
      - pavucontrol
      - exfat-utils
      - fuse-exfat
      - htop
      - kate
      - zbar
      - libcxx
      - libcxx.i686
      - darktable
      - ripgrep
      - ffmpeg
      - nmap
      - gnupg

- name: 'Create plugdev group'
  group:
    name: plugdev
    state: present
  become: true

- name: 'Configure my account'
  become: true
  user:
    name: czocher
    comment: Paweł Jan Czochański
    shell: /bin/zsh
    groups: plugdev
    append: true
    state: present

- name: 'Create the font folder'
  file:
    path: ~/.local/share/fonts
    state: directory

- name: 'Download FiraCode font'
  get_url:
    url: https://github.com/tonsky/FiraCode/blob/master/distr/ttf/FiraCode-{{ item }}.ttf?raw=true
    dest: ~/.local/share/fonts/FiraCode-{{ item }}.ttf
  with_items:
    - Bold
    - Light
    - Medium
    - Regular

- name: 'Refresh font cache'
  shell: fc-cache -f
  changed_when: False

- name: 'Install rust'
  shell: curl https://sh.rustup.rs -sSf | bash -s -- -y
  args:
    creates: ~/.rustup

- name: 'Configure rust'
  shell: ./rustup self update && ./rustup install stable && ./rustup component add rls-preview --toolchain stable && ./rustup component add rust-analysis --toolchain stable && ./rustup component add rust-src --toolchain stable
  args:
    chdir: ~/.cargo/bin
    creates: ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu

- name: 'Check if dotfiles exist'
  stat:
    path: ~/.dotfiles
  register: dotfiles_directory

- name: 'Clone dotfiles'
  git:
    repo: https://github.com/czocher/dotfiles.git
    dest: ~/.dotfiles
  when: dotfiles_directory.stat.exists == false
  register: dotfiles

- name: 'Install dotfiles'
  shell: rcup -vf
  args:
    creates: ~/.gnupg
  when: dotfiles is success

- name: 'Ensure proper ssh/config permissions'
  file:
    path: ~/.ssh/config
    mode: '700'
  when: dotfiles is success

- name: 'Ensure proper gnupg permissions'
  file:
    path: ~/.gnupg/
    mode: '700'
  when: dotfiles is success

- name: 'Config email address for git'
  git_config:
    name: user.email
    scope: global
    value: '{{ email }}'
  when: dotfiles is success

- name: 'Get plug for nvim'
  shell: curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  args:
    creates: ~/.config/nvim/autoload/plug.vim

- name: 'Install nvim plugins'
  shell: nvim +PlugInstall +UpdateRemotePlugins +qa
  args:
    creates: ~/.config/nvim/plugged

- name: 'Install virtualenvwrapper'
  become: true
  pip:
    name: virtualenvwrapper

- name: 'Clone git-aware-prompt'
  git:
    repo: https://github.com/jimeh/git-aware-prompt.git
    dest: ~/.bash/git-aware-prompt
    version: b032b4156241182a69c2bce36bddb97469194336

- name: 'Clone oh-my-zsh'
  git:
    repo: https://github.com/robbyrussell/oh-my-zsh
    dest: ~/.oh-my-zsh

- name: 'Download public key'
  get_url:
    url: https://keybase.io/czocher/pgp_keys.asc
    dest: ~/.publickey.asc

- name: 'Add public key to gpg'
  shell: gpg --import ~/.publickey.asc && echo "C00F912646F8908A3E9444D982843164B26A29FB:6:" | gpg --import-ownertrust -
  args:
    creates: ~/.gnupg/pubring.kbx

- name: 'Add public key to gpg2'
  shell: gpg2 --import ~/.publickey.asc && echo "C00F912646F8908A3E9444D982843164B26A29FB:6:" | gpg2 --import-ownertrust -
  args:
    creates: ~/.gnupg/pubring.kbx
  register: gpg

- name: 'Add ssh publickey to authorized_keys'
  authorized_key:
    user: czocher
    key: https://github.com/czocher.keys
    state: present

- name: 'Create yubikey u2f directories for user'
  file:
    path: ~/.config/Yubico
    state: directory

- name: 'Create yubikey u2f directories for root'
  become: true
  file:
    path: /root/.config/Yubico
    state: directory

- name: 'Allow for sudo yubikey authentication'
  become: true
  pamd:
    name: sudo
    type: auth
    control: include
    module_path: system-auth
    new_type: auth
    new_control: sufficient
    new_module_path: pam_u2f.so
    module_arguments: cue
    state: before

- name: 'Allow for su yubikey authentication'
  become: true
  pamd:
    name: su
    type: auth
    control: include
    module_path: system-auth
    new_type: auth
    new_control: sufficient
    new_module_path: pam_u2f.so
    module_arguments: cue
    state: before

- name: 'Add ssh agent forward for sudo'
  become: true
  lineinfile:
    path: /etc/sudoers
    line: 'Defaults    env_keep += "SSH_AUTH_SOCK"'
    state: present
    insertafter: '^Defaults    env_keep ='
    validate: '/usr/sbin/visudo -cf %s'

- name: 'Configure TCP BBR'
  become: true
  sysctl:
    name: '{{ item.name }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - { name: 'net.core.default_qdisc', value: 'fq' }
    - { name: 'net.ipv4.tcp_congestion_control', value: 'bbr' }

- name: 'Enable kdeconnect on firewall'
  become: true
  firewalld:
    service: kdeconnect
    state: enabled
    permanent: yes

- name: 'Prepare /tmp for SSD'
  become: true
  mount:
    name: '/tmp/'
    src: 'none'
    fstype: 'tmpfs'
    opts: 'size=10%'
    state: present

- name: 'Enable fstrim'
  become: true
  systemd:
    name: fstrim.timer
    enabled: yes

- name: 'Enable watchdog'
  become: true
  systemd:
    name: watchdog
    enabled: yes

- name: 'Find the firefox profile directory'
  shell: cat ~/.mozilla/firefox/profiles.ini | grep Path | cut -d = -f 2
  changed_when: False
  register: profile

- name: 'Copy firefox user preferences'
  template:
    src: 'user.js'
    dest: ~/.mozilla/firefox/{{ profile.stdout }}/

- name: 'Config udev rules for android development'
  become: true
  template:
    src: '99-android-debug.rules'
    dest: /etc/udev/rules.d/
  register: udev

- name: 'Reload udev'
  become: true
  command: udevadm control --reload
  when: udev.changed

- name: 'Restart udev service'
  become: true
  service: name=systemd-udevd state=restarted
  when: udev.changed

- name: 'Check if jetbrains exists'
  become: true
  stat:
    path: /opt/jetbrains-toolbox/jetbrains-toolbox
  register: jetbrains_binary

- name: 'Install jetbrains-toolbox'
  block:
    - name: 'Install required jetbrains dependencies'
      become: true
      dnf:
        state: latest
        pkg:
          - java-1.8.0-openjdk
          - java-1.8.0-openjdk-devel
          - glibc.i686
          - ncurses-libs.i686
    - name: 'Get the latest jetbrains package url'
      uri:
        url: 'https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release'
        return_content: yes
      register: jetbrains
    - name: 'Download the latest jetbrains package'
      become: true
      get_url:
        url: '{{ jetbrains.json.TBA.0.downloads.linux.link }}'
        dest: /opt/jetbrains-toolbox.tar.gz
    - name: 'Create the required jetbrains directory'
      become: true
      file:
        path: /opt/jetbrains-toolbox
        state: directory
    - name: 'Unpack jetbrains-toolbox'
      become: true
      unarchive:
        src: /opt/jetbrains-toolbox.tar.gz
        dest: /opt/jetbrains-toolbox
        extra_opts: [--strip-components=1]
    - name: 'Remove the jetbrains archive'
      become: true
      file:
        path: /opt/jetbrains-toolbox.tar.gz
        state: absent
    - name: 'Link the jetbrains binary'
      become: true
      file:
        src: '/opt/jetbrains-toolbox/jetbrains-toolbox'
        dest: '/usr/bin/jetbrains-toolbox'
        state: link
    - name: 'Copy jetbrains-toolbox icon'
      become: true
      template:
        src: 'jetbrains-toolbox.svg'
        dest: '/usr/share/icons/hicolor/scalable/apps/'
    - name: 'Update the jetbrains icons cache'
      become: true
      command: gtk-update-icon-cache -f -t /usr/share/icons/hicolor
      changed_when: false
    - name: 'Copy the desktop entry'
      become: true
      template:
        src: 'jetbrains-toolbox.desktop'
        dest: '/usr/share/applications/jetbrains-toolbox.desktop'
  when: jetbrains_binary.stat.exists == false

- name: 'Check if telegram exists'
  stat:
    path: ~/Programy/Telegram
  register: telegram

- name: 'Setup Telegram Desktop'
  block:
    - name: 'Download telegram'
      get_url:
        url: https://telegram.org/dl/desktop/linux
        dest: ~/Programy/telegram.tar.xz
    - name: 'Unpack telegram'
      unarchive:
        src: ~/Programy/telegram.tar.xz
        dest: ~/Programy/
    - name: 'Cleanup telegram'
      file:
        path: ~/Programy/telegram.tar.gz
        state: absent
  when: telegram.stat.exists == false

- name: 'Check if discord exists'
  stat:
    path: ~/Programy/Discord
  register: discord

- name: 'Setup Discord'
  block:
    - name: 'Download discord'
      get_url:
        url: https://discordapp.com/api/download?platform=linux&format=tar.gz
        dest: ~/Programy/discord.tar.gz
    - name: 'Unpack discord'
      unarchive:
        src: ~/Programy/discord.tar.gz
        dest: ~/Programy/
    - name: 'Cleanup discord'
      file:
        path: ~/Programy/discord.tar.gz
        state: absent
  when: discord.stat.exists == false
